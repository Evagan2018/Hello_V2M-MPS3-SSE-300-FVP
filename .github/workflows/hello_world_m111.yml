name: Matrix and 3 sequential jobs.

on:
  workflow_dispatch:

  pull_request:
    branches: [main]
    paths:
      - ./**

  push:
    branches: [main]
    paths:    
      - ./**

  schedule:
    - cron: '00 22 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Test concurrency

jobs:

  diagnosis:
    # In preparation: The intention of this part of the code is to do the checkout
    # of the repository in this job and share the workspace in subsequent jobs.

    # Diagnosis: Get the current runner.name and the Concurrency group
    runs-on: ubuntu-latest
    outputs:
      established-runner: ${{ runner.name }}
    steps:
      - run: | 
          echo "Info: Selected runner = ${{ runner.name }}"
          echo "Info: Concurrency group = ${{ github.workflow }}-${{ github.ref }}"

  bld_exe:
    needs: [diagnosis]
    runs-on: ubuntu-latest
    
    if: ${{ always() && contains(needs.*.result, 'success') }}
    outputs:
      job-status: ${{ job.status }}

    strategy:
      fail-fast: false

      matrix:

        compiler: [ 
          {name: AC6,  ext: axf}, 
          {name: GCC,  ext: elf}
        ]

        target: [
          {type: ARMCM0,   model: tbd,  board: tbd}, 
          {type: ARMCM0P,  model: tbd,  board: tbd}, 
          {type: ARMCM1,   model: tbd,  board: tbd}, 
          {type: ARMCM3,   model: tbd,  board: tbd}, 
          {type: ARMCM55,  model: tbd,  board: tbd}, 
          {type: ARMCM85,  model: tbd,  board: tbd}
        ]

        build: [ 
          {type: Debug}, 
          {type: Release}
        ]

      max-parallel: 8

    steps:
      # Setup required toolchains and license
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4
      
      # https://github.com/ARM-software/cmsis-actions
      - name: Activate vcpkg
        uses: ARM-software/cmsis-actions/vcpkg@v1

      # https://github.com/ARM-software/cmsis-actions
      - name: Activate Arm tool license
        uses: ARM-software/cmsis-actions/armlm@v1

      # Build executable for a specific target compiler pair
      - name: Build executable ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}
        id: build_executable
        if: always()
        run: |
            echo "Build executable for a specific target compiler pair "
            cbuild hello_world.csolution.yml --packs --verbose \
                --context hello_world.${{ matrix.build.type }}+${{ matrix.target.type }} \
                --toolchain ${{ matrix.compiler.name }} --rebuild \
                --log ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log

      - name: Error build log
        if: always() && steps.build_executable.outcome != 'success'
        run: |
            # Check if a build exist
            if [ -f ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ]; then
                tree
            else
                touch ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
                mkdir -p out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}
                echo "Error: Build log does not exist!" > ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
                tree
            fi 
            mv ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/

      - name: Success build log
        if: steps.build_executable.outcome == 'success'
        run: | 
            mv ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/

      - name: Upload build log
        if: always() && ((steps.build_executable.outcome == 'success') || (steps.build_executable.outcome != 'success'))
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
          path: ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
          if-no-files-found: ignore


  download_logs:
    needs: [bld_exe]
    if: ${{ always() }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:

        compiler: [ 
          {name: AC6,  ext: axf}, 
          {name: GCC,  ext: elf}
        ]

        target: [
          {type: ARMCM0,   model: tbd,  board: tbd}, 
          {type: ARMCM0P,  model: tbd,  board: tbd}, 
          {type: ARMCM1,   model: tbd,  board: tbd}, 
          {type: ARMCM3,   model: tbd,  board: tbd}, 
          {type: ARMCM55,  model: tbd,  board: tbd}, 
          {type: ARMCM85,  model: tbd,  board: tbd}
        ]

        build: [ 
          {type: Debug}, 
          {type: Release}
        ]

      max-parallel: 8

    steps:
      # Create an artifact directory for the logs
      - name: Create artifact directory
        run: |
          mkdir -p artifact

      # Download previous generated logs
      - name: Download ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
        id: download_logs
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
          path: tmp

      # Move downloaded logs to the artifact folder
      - name: Move downloaded logs
        if: always()
        run: |
          if [ -f ./tmp/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ]; then
             mv ./tmp/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ./artifact/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ;
          fi

      # Diagnosis: Show the directory structure of the artifacts folder
      - name: Show downloaded logs
        run: |
          echo "Show artifact folder"
          tree artifact
          cat ./artifact/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
