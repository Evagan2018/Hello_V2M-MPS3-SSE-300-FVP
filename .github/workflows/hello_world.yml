name: Hello World example (1 job with sequential step execution)

on:
  workflow_dispatch:

  pull_request:
    branches: [main]
    paths:
      - ./**

  push:
    branches: [main]
    paths:    
      - ./**

  schedule:
    - cron: '00 22 * * 0'

jobs:
  install_build_execute:

    runs-on: ubuntu-latest

    strategy:
      matrix:

        compiler: [ 
          {name: AC6,  ext: axf},
          {name: GCC,  ext: elf}
        ]

        target: [
          {type: CMSDK_CM0_VHT,        model: tbd,  board: tbd}, 
          {type: CMSDK_CM0plus_VHT,    model: tbd,  board: tbd}, 
          {type: CMSDK_CM3_VHT,        model: tbd,  board: tbd}, 
          {type: CMSDK_CM4_VHT,        model: tbd,  board: tbd}, 
          {type: CMSDK_CM4_FP_VHT,     model: tbd,  board: tbd}, 
          {type: CMSDK_CM7_VHT,        model: tbd,  board: tbd}, 
          {type: CMSDK_CM7_SP_VHT,     model: tbd,  board: tbd}, 
          {type: CMSDK_CM7_DP_VHT,     model: tbd,  board: tbd}, 
          {type: IOTKit_CM23_VHT,      model: tbd,  board: tbd}, 
          {type: IOTKit_CM33_VHT,      model: tbd,  board: tbd}, 
          {type: IOTKit_CM33_FP_VHT,   model: tbd,  board: tbd}, 
          {type: ARMCM0,               model: tbd,  board: tbd}, 
          {type: ARMCM0P,              model: tbd,  board: tbd}, 
          {type: ARMCM1,               model: tbd,  board: tbd}, 
          {type: ARMCM3,               model: tbd,  board: tbd}, 
          {type: ARMCM55,              model: tbd,  board: tbd}, 
          {type: ARMCM85,              model: tbd,  board: tbd}
        ]
 
        build: [ 
          {type: Release},
          {type: Debug}
        ]

      max-parallel: 1

    steps:

      # ----------------------------------------------------------------
      # Setup required toolchains and license
      # ----------------------------------------------------------------

      # https://github.com/actions/checkout
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      # https://github.com/actions/setup-python
      - name: Setup Python 3.9 üì¶
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # https://github.com/ARM-software/cmsis-actions
      - name: Activate vcpkg üéÅ
        uses: ARM-software/cmsis-actions/vcpkg@v1

      # https://github.com/ARM-software/cmsis-actions
      - name: Activate Arm tool license
        uses: ARM-software/cmsis-actions/armlm@v1

      # ----------------------------------------------------------------
      # Build executable for a specific target compiler pair
      # ----------------------------------------------------------------
      - name: Build executable
        if: always()      
        continue-on-error: true
        working-directory: ./
        # Remark regarding the build log redirection (tee command). Do not redirect the build log to the ./out/hello_world/ folder.
        # This folder is currently used by the cbuild process. Access operations to this folder during the build operations will throws errors.
        # The build process creates in ./out/hello_world/ the following subdirectory structure:  /target_type/build_type/compiler_name/
        run: |
            echo "Build executable for a specific target compiler pair "
            cbuild hello_world.csolution.yml --packs --context \
                hello_world.${{ matrix.build.type }}+${{ matrix.target.type }} \
                --toolchain ${{ matrix.compiler.name }} -r \
                | tee ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
            mv ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/

      # ----------------------------------------------------------------
      # Diagnosis: Show the directory structure of the project folder
      # ----------------------------------------------------------------
      - name: Show project folder
        if: always()
        continue-on-error: true
        run: |
          echo "Diagnosis: Show the directory structure of the project output folder"
          tree ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/

      # ----------------------------------------------------------------
      # Upload build log
      # ----------------------------------------------------------------
      - name: Upload build log
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
          path: ./out/hello_world/${{ matrix.target.type }}/${{ matrix.build.type }}/${{ matrix.compiler.name }}/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log

      # ----------------------------------------------------------------
      # Create artifact directory
      # ----------------------------------------------------------------        
      - name: Create artifact directory
        if: always()
        continue-on-error: true
        working-directory: ./
        run: |
          mkdir -p artifact

      # ----------------------------------------------------------------
      # Download previous generated executables
      # ----------------------------------------------------------------
      - name: Download ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ‚è¨
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log
          path: tmp

      # ----------------------------------------------------------------
      # Move downloaded exectuables to the artifact folder
      # ----------------------------------------------------------------
      - name: Move downloaded artifacts
        if: always()
        continue-on-error: true
        working-directory: ./
        run: |        
          mv ./tmp/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log ./artifact/${{ matrix.target.type }}.${{ matrix.compiler.name }}.${{ matrix.build.type }}.build.log

      # ----------------------------------------------------------------
      # Diagnosis: Show the directory structure of artifacts folder
      # ----------------------------------------------------------------
      - name: Show downloaded artifacts
        if: always()
        continue-on-error: true
        working-directory: ./
        run: |
          echo "Show artifact folder"
          tree artifact
